#!/bin/bash

set -e

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            echo "Usage: bash lint [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help   Show this help message"
            echo ""
            echo "This script runs comprehensive linting for Python, C++, and JavaScript."
            echo "JavaScript linting: FAST ONLY (skips if not available)."
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Unset VIRTUAL_ENV to avoid warnings about mismatched paths
unset VIRTUAL_ENV


echo "üöÄ Running FastLED Comprehensive Linting Suite"
echo "=============================================="

# Python linting
echo ""
echo "üìù PYTHON LINTING"
echo "------------------"
echo "Running ruff check (linting)"
uv run ruff check --fix test.py
uv run ruff check --fix ci --exclude ci/tmp/ --exclude ci/wasm/
uv run ruff check --fix dev/dev.py
echo "Running ruff format (formatting + import sorting)"
uv run ruff format test.py
uv run ruff format ci --exclude ci/tmp/ --exclude ci/wasm/
uv run ruff format dev/dev.py
echo "Running pyright ci"
# Check if pyright needs to run using intelligent caching
if uv run python ci/pyright-cached.py ci --threads; then
    # Cache hit - pyright was skipped or ran successfully
    true
else
    # Cache miss or error - fall back to regular pyright
    echo "Falling back to regular pyright..."
    uv run pyright ci --threads
fi

export CLANG_FORMAT_STYLE="{SortIncludes: false}"

# C++ linting
echo ""
echo "üîß C++ LINTING"
echo "---------------"
folders=(
    #"src/lib8tion"
    #"src/platforms/stub"
    #"src/platforms/apollo3"  # clang-format breaks apollo3
    #"src/platforms/esp/8266"  # clang-format breaks esp8266
    #"src/platforms/arm" # clang-format breaks arm
    #"src/fx"
    #"src/fl"
    #"src/platforms/wasm"
)

for folder in "${folders[@]}"; do
  echo "Running clang-format on $folder"
  uv run ci/run-clang-format.py -i -r "$folder" || uv run ci/run-clang-format.py -i -r "$folder"
done

# JavaScript linting and enhanced checking (now included by default)
echo ""
echo "üåê JAVASCRIPT LINTING & TYPE CHECKING"
echo "--------------------------------------"

# Colors for JavaScript linting output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if fast linting is available
ESLINT_EXE=""
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
    ESLINT_EXE=".js-tools/node_modules/.bin/eslint.cmd"
else
    ESLINT_EXE=".js-tools/node_modules/.bin/eslint"
fi

if [ -f "ci/js/lint-js-fast" ] && [ -f "$ESLINT_EXE" ]; then
    echo -e "${BLUE}üöÄ Using fast JavaScript linting (Node.js + ESLint)${NC}"
    if ! bash ci/js/lint-js-fast; then
        echo -e "${RED}‚ùå Fast JavaScript linting failed${NC}"
        exit 1
    fi
else
    echo -e "${BLUE}‚ö†Ô∏è  Fast JavaScript linting not available. Skipping JavaScript linting.${NC}"
    echo -e "${BLUE}üí° To enable fast JavaScript linting, run: uv run ci/setup-js-linting-fast.py${NC}"
fi

echo ""
echo "üéâ All linting completed!"
echo "========================="
echo ""
echo "üí° FOR AI AGENTS:"
echo "  - Use 'bash lint' for comprehensive linting (Python, C++, and JavaScript)"
echo "  - JavaScript linting: FAST ONLY (no slow fallback)"
echo "  - To enable fast JavaScript linting: uv run ci/setup-js-linting-fast.py"
echo "  - Use 'bash lint --help' for usage information"
